}
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
n  # Print the map
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
source("./lib/functions.R")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(leaflet)
rm(list=ls(all=TRUE))
ride.counts <- read_csv("./data/count_table_total.csv")
ride.counts.all <- ride.counts %>%
dplyr::group_by(pickup_lon, pickup_lat, dropoff_lon, dropoff_lat, color) %>%
dplyr::summarise(total.count = sum(n)) %>% as.data.frame()
#ride.counts.all$total.count <- as.numeric(ride.counts.all$total.count)
ride.counts.filter.threshold <- dplyr::filter(ride.counts.all, total.count >= 30000)
ride.counts.filter.threshold[,6] <- as.integer(as.character(ride.counts.filter.threshold[,6]))
dim(ride.counts.filter.threshold)
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
n  # Print the map
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
n  # Print the map
View(ride.counts.filter.threshold)
View(ride.counts)
View(ride.counts)
ride.counts.all <- ride.counts %>%
dplyr::group_by(pickup_zone, dropoff_zone, pickup_lon, pickup_lat, dropoff_lon, dropoff_lat, color) %>%
dplyr::summarise(total.count = sum(n)) %>% as.data.frame()
#ride.counts.all$total.count <- as.numeric(ride.counts.all$total.count)
ride.counts.filter.threshold <- dplyr::filter(ride.counts.all, total.count >= 30000)
ride.counts.filter.threshold[,6] <- as.integer(as.character(ride.counts.filter.threshold[,6]))
dim(ride.counts.filter.threshold)
View(ride.counts.filter.threshold)
ride.counts.all <- ride.counts %>%
dplyr::group_by(pickup_zone, dropoff_zone, pickup_lon, pickup_lat, dropoff_lon, dropoff_lat, color) %>%
dplyr::summarise(total.count = sum(n)) %>% as.data.frame()
#ride.counts.all$total.count <- as.numeric(ride.counts.all$total.count)
ride.counts.filter.threshold <- dplyr::filter(ride.counts.all, total.count >= 30000)
ride.counts.filter.threshold[,8] <- as.integer(as.character(ride.counts.filter.threshold[,8]))
dim(ride.counts.filter.threshold)
View(ride.counts.filter.threshold)
View(ride.counts.filter.threshold)
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(leaflet)
rm(list=ls(all=TRUE))
ride.counts <- read_csv("./data/count_table_total.csv")
ride.counts.all <- ride.counts %>%
dplyr::group_by(pickup_zone, dropoff_zone, pickup_lon, pickup_lat, dropoff_lon, dropoff_lat, color) %>%
dplyr::summarise(total.count = sum(n)) %>% as.data.frame()
#ride.counts.all$total.count <- as.numeric(ride.counts.all$total.count)
ride.counts.filter.threshold <- dplyr::filter(ride.counts.all, total.count >= 30000)
ride.counts.filter.threshold[,8] <- as.integer(as.character(ride.counts.filter.threshold[,8]))
dim(ride.counts.filter.threshold)
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
View(Get_curve)
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
n  # Print the map
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
n  # Print the map
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
install.packages("htmlwidgets")
library(htmlwidgets)
install.packages("htmltools")
library(htmltools)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(leaflet)
rm(list=ls(all=TRUE))
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(leaflet)
rm(list=ls(all=TRUE))
ride.counts <- read_csv("./data/count_table_total.csv")
ride.counts.all <- ride.counts %>%
dplyr::group_by(pickup_zone, dropoff_zone, pickup_lon, pickup_lat, dropoff_lon, dropoff_lat, color) %>%
dplyr::summarise(total.count = sum(n)) %>% as.data.frame()
#ride.counts.all$total.count <- as.numeric(ride.counts.all$total.count)
ride.counts.filter.threshold <- dplyr::filter(ride.counts.all, total.count >= 30000)
ride.counts.filter.threshold[,8] <- as.integer(as.character(ride.counts.filter.threshold[,8]))
dim(ride.counts.filter.threshold)
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
n  # Print the map
names(ride.counts.filter.threshold)
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
source("./lib/functions.R")
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
n  # Print the map
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
n  # Print the map
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
n  # Print the map
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
n  # Print the map
source("./lib/functions.R")
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron")
n <- paint.arrows(n, ride.counts.filter.threshold)
n  # Print the map
View(ride.counts.filter.threshold)
import data.table
install.packages("data.table")
import data.table
library(data.table)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
list.files(path = '../output', recursive = TRUE)
files.output <- list.files(path = '../output', recursive = TRUE)
library(data.table)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
files.output <- list.files(path = '../output', recursive = TRUE)
for(f in files.output){
print f
}
for(f in files.output){
print(f)
}
for(f in files.output){
f <- pasete('../output/', f)
print(f)
}
for(f in files.output){
f <- paste('../output/', f)
print(f)
}
for(f in files.output){
f <- paste0('../output/', f)
print(f)
}
library(stringr)
library(tidyverse)
library(stringr)
library(tidyverse)
library(tidyverse)
library(stringr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
files.output <- list.files(path = '../output', recursive = TRUE)
for(f in files.output){
f <- paste0('../output/', f)
if(str_detect(f, 'scraped_data')){
if(exists('scraped.data')){
} else {
scraped.data <- fread(f)
}
}
}
files.output[grepl('scraped_data')]
files.scraped <- files.output[grepl('scraped_data', files.output)]
files.scraped
# Process and put into a data.table
combine.csv <- function(file.list, file.text){
files.to.get <- file.list[grepl(file.text, file.list)]
df <- do.call(rbind,lapply(files.to.get,read.csv))
return(df)
}
scraped.data <- combine.csv(files.output, 'scraped_data')
files.output <- paste0('../output/', files.output)
# Process and put into a data.table
combine.csv <- function(file.list, file.text){
files.to.get <- file.list[grepl(file.text, file.list)]
df <- do.call(rbind,lapply(files.to.get,read.csv))
return(df)
}
scraped.data <- combine.csv(files.output, 'scraped_data')
# Process and put into a data.table
combine.csv <- function(file.list, file.text){
files.to.get <- file.list[grepl(file.text, file.list)]
df.list <- list()
counter <- 0
for(i in files.to.get){
df.list[counter] <- read.csv(files.to.get)
counter <- counter + 1
}
return(df.list)
}
scraped.data <- combine.csv(files.output, 'scraped_data')
# Process and put into a data.table
combine.csv <- function(file.list, file.text){
files.to.get <- file.list[grepl(file.text, file.list)]
df.list <- list()
counter <- 0
for(i in files.to.get){
df.list[counter] <- read.csv(i)
counter <- counter + 1
}
return(df.list)
}
scraped.data <- combine.csv(files.output, 'scraped_data')
# Process and put into a data.table
combine.csv <- function(file.list, file.text){
files.to.get <- file.list[grepl(file.text, file.list)]
df.list <- list()
counter <- 0
for(i in files.to.get){
df.list[counter] <- read.csv(i)
counter <- counter + 1
}
return(df.list)
}
scraped.data <- combine.csv(files.output, 'scraped_data')
i
combine.csv <- function(file.list, file.text){
files.to.get <- file.list[grepl(file.text, file.list)]
df.list <- list()
counter <- 0
for(i in files.to.get){
df.list[counter] <- read.csv(i, header = FALSE)
counter <- counter + 1
}
return(df.list)
}
scraped.data <- combine.csv(files.output, 'scraped_data')
scraped.data
scraped.data.head()
scraped.data.head()
scraped.data.head
scraped.data[0]
scraped.data[1]
combine.csv.2 <- function(file.list, file.text){
files.to.get <- file.list[grepl(file.text, file.list)]
do.call(rbind,lapply(files.to.get,read.csv(header = FALSE)))
return(df.list)
}
scraped.data <- combine.csv.2(files.output, 'scraped_data')
combine.csv.2 <- function(file.list, file.text){
files.to.get <- file.list[grepl(file.text, file.list)]
do.call(rbind,lapply(files.to.get,read.csv(x, header = FALSE)))
return(df.list)
}
scraped.data <- combine.csv.2(files.output, 'scraped_data')
combine.csv.2 <- function(file.list, file.text){
files.to.get <- file.list[grepl(file.text, file.list)]
do.call(rbind,
lapply(files.to.get,function(x){ read.csv(x, header = FALSE)
})
)
return(df.list)
}
scraped.data <- combine.csv.2(files.output, 'scraped_data')
# Process and put into a data.table
combine.csv <- function(file.list, file.text){
files.to.get <- file.list[grepl(file.text, file.list)]
df.list <- list()
counter <- 1
for(i in files.to.get){
df.list[[counter]] <- read.csv(i, header = FALSE)
counter <- counter + 1
}
return(df.list)
}
combine.csv.2 <- function(file.list, file.text){
files.to.get <- file.list[grepl(file.text, file.list)]
do.call(rbind,
lapply(files.to.get,function(x){ read.csv(x, header = FALSE)
})
)
return(df.list)
}
scraped.data <- combine.csv(files.output, 'scraped_data')
scraped.data[1]
scraped.data[1].colnames
scraped.data[[1]].colnames
colnames(scraped.data[[1]])
len(colnames(scraped.data[[1]]))
length(colnames(scraped.data[[1]]))
for(i in range(1:length(scraped.data))){
print(length(colnames(scraped.data[[1]])))
}
length(scraped.data)
for(i in range(1:length(scraped.data))){
print(length(colnames(scraped.data[[i]])))
}
range(1:length(scraped.data)
range(1:length(scraped.data))
range(1:length(scraped.data))
range(length(scraped.data)
range(length(scraped.data))
range(length(scraped.data))
c(1:length(scraped.data))
for(i in c(1:length(scraped.data))){
print(length(colnames(scraped.data[[i]])))
}
head(scraped.data[[1]], n = 5)
colnames(scraped.data[[1]]) = scraped.data[[1]][1, ]
head(scraped.data[[1]], n = 5)
colnames(scraped.data[[1]]) = scraped.data[[1][1,]]
scraped.data[[1]][1,]
colnames(scraped.data[[1]])
colnames(scraped.data[[1]]) <- scraped.data[[1]][1,]
scraped.data[[1]][1,]
colnames(scraped.data[[1]])
colnames(scraped.data[[1]]) <-  as.character(unlist(scraped.data[[1]][1,]))
colnames(scraped.data[[1]])
as.character(unlist(scraped.data[[1]][1,]))
scraped.data[[1]][1,]
unlist(scraped.data[[1]][1,])
as.character(scraped.data[[1]][1,])
as.character(scraped.data[[1]][0,])
as.character(scraped.data[[1]][1,])
as.character(scraped.data[[1]][2,])
colnames(scraped.data[[1]])
scraped.data[[1]][1,]
names(scraped.data[[1]]) <-  as.character(scraped.data[[1]][1,])
colnames(scraped.data[[1]])
names(scraped.data[[1]])
scraped.data[[1]][1,]
scraped.data[1]
scraped.data[1][1,]
scraped.data[1]
scraped.data[1]
scraped.data[1][1]
scraped.data[1][1,]
scraped.data[[1]][1,]
unlist(scraped.data[[1]][1,])
scraped.data[[1]][1,1]
scraped.data[[1]][1,2]
scraped.data[[1]][1,3]
scraped.data[[1]][1,4]
scraped.data[[1]][1,]
as.matrix(scraped.data[[1]][1,])
unlist(as.matrix(scraped.data[[1]][1,]))
list(as.matrix(scraped.data[[1]][1,]))
as.vector(scraped.data[[1]][1,])
names(scraped.data[[1]]) <- as.vector(scraped.data[[1]][1,])
names(scraped.data[[1]]) <- as.vector(scraped.data[[1]][1,])
setNames(scraped.data[[1]]) <- as.vector(scraped.data[[1]][1,])
setNames(scraped.data[[1]], as.vector(scraped.data[[1]][1,]) )
names(scraped.data[[1]])
scraped.data[[1]] <- setNames(scraped.data[[1]], as.vector(scraped.data[[1]][1,]) )
names(scraped.data[[1]])
scraped.data[[1]][1,]
head(scraped.data[[1]], n = 5)
head(scraped.data[[1]], n = 1)
scraped.data <- combine.csv.2(files.output, 'scraped_data')
combine.csv.2 <- function(file.list, file.text){
files.to.get <- file.list[grepl(file.text, file.list)]
do.call(bind_rows,
lapply(files.to.get,function(x){ read.csv(x, header = FALSE)
})
)
return(df.list)
}
# Get the list of data frames
scraped.data <- combine.csv.2(files.output, 'scraped_data')
combine.csv.2 <- function(file.list, file.text){
files.to.get <- file.list[grepl(file.text, file.list)]
do.call(bind_rows,
lapply(files.to.get,function(x){ read.csv(x, header = FALSE, stringsAsFactors = FALSE)
})
)
return(df.list)
}
# Get the list of data frames
scraped.data <- combine.csv.2(files.output, 'scraped_data')
combine.csv.2 <- function(file.list, file.text){
files.to.get <- file.list[grepl(file.text, file.list)]
do.call(bind_rows,
lapply(files.to.get,function(x){
read.csv(x, header = FALSE, colClasses = 'character' )
})
)
return(df.list)
}
# Get the list of data frames
scraped.data <- combine.csv.2(files.output, 'scraped_data')
combine.csv.2 <- function(file.list, file.text){
files.to.get <- file.list[grepl(file.text, file.list)]
df <- do.call(bind_rows,
lapply(files.to.get,function(x){
read.csv(x, header = FALSE, colClasses = 'character' )
})
)
return(df)
}
# Get the list of data frames
scraped.data <- combine.csv.2(files.output, 'scraped_data')
head(scraped.data)
unique(scraped.data$V1)
scraped.data[scraped.data$V1 == 'CORREA']
scraped.data[scraped.data$V1 == 'CORREA',]
combine.csv.2 <- function(file.list, file.text){
files.to.get <- file.list[grepl(file.text, file.list)]
df <- do.call(bind_rows,
lapply(files.to.get,function(x){
data <- read.csv(x, header = FALSE, colClasses = 'character')
data$file <- x
})
)
return(df)
}
# Get the list of data frames
scraped.data <- combine.csv.2(files.output, 'scraped_data')
scraped.data[scraped.data$V1 == 'CORREA',]
combine.csv.2 <- function(file.list, file.text){
files.to.get <- file.list[grepl(file.text, file.list)]
df <- do.call(bind_rows,
lapply(files.to.get,function(x){
data <- read.csv(x, header = FALSE, colClasses = 'character')
data$filename <- x
})
)
return(df)
}
scraped.data <- combine.csv.2(files.output, 'scraped_data')
combine.csv.2 <- function(file.list, file.text){
files.to.get <- file.list[grepl(file.text, file.list)]
df <- do.call(bind_rows,
lapply(files.to.get,function(x){
data <- read.csv(x, header = FALSE, colClasses = 'character')
data$filename <- x
return(data)
})
)
return(df)
}
scraped.data <- combine.csv.2(files.output, 'scraped_data')
scraped.data[scraped.data$V1 == 'CORREA',]
unique(scraped.data$filename)
unique(scraped.data$V1)
scraped.data[scraped.data$V1 == "HN JUN 2016: 526112, HN JUL 2016: 394584, HN AGO 2016: 426664, HN SEP 2016: 375336."
,]
